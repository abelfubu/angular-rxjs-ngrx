{
  "cypress.io it": {
    "prefix": "cyit",
    "body": ["it('${1:condition}', () => {", "  cy.$0", "});"],
    "description": "Cypress io it"
  },
  "cypress contain": {
    "prefix": "cycontains",
    "scope": "typescript",
    "body": [
      "cy.contains('${1:element}'$3).${2|click,type|}($4);$0"
    ],
    "description": "Cypress contains"
  },
  "cypress placeholder": {
    "prefix": "cyplaceholder",
    "scope": "typescript",
    "body": [
      "cy.get('[placeholder=\"${1:placeholder}\"]').${2|click,type|}($3);$0"
    ],
    "description": "Cypress get by placeholder"
  },
  "cyintwait": {
    "prefix": "cyintwait",
    "scope": "typescript",
    "body": [
      "cy.intercept('${1|POST,GET,DELETE|}', '**/${2:route}').as('$2');$0",
      "cy.wait('@$2').its('response.statusCode').should('eq', 200);"
    ],
    "description": "cyintwait"
  },
  "cypresscommands": {
    "prefix": "cycommands",
    "scope": "typescript",
    "body": [
      "// eslint-disable-next-line @typescript-eslint/no-namespace",
      "declare namespace Cypress {",
      "  interface Chainable {",
      "    login(): typeof login;",
      "    getBySel(element: string, ...args: Partial<[]>): typeof getBySel;",
      "    saveLocalStorage(): typeof saveLocalStorage;",
      "    navigateTo(element: string): typeof navigateTo;",
      "    restoreLocalStorage(): typeof restoreLocalStorage;",
      "    fillDatePicker(element: string, index: number): typeof fillDatePicker;",
      "  }",
      "}",
      "",
      "const LOCAL_STORAGE_MEMORY = {};",
      "",
      "const navigateTo = (element: string): void => {",
      "  cy.visit('/');",
      "  cy.wait(1500);",
      "  cy.contains(element).click();",
      "};",
      "",
      "const fillDatePicker = (element: string, date: Date): void => {",
      "  const months = ['ENE', 'FEB', 'MAR', 'ABR', 'MAY', 'JUN', 'JUL', 'AGO', 'SEP', 'OCT', 'NOV', 'DIC'];",
      "  cy.get(element).get('svg').click();",
      "  cy.get('.mat-calendar-arrow').click();",
      "  cy.get('.mat-calendar').then(calendar => {",
      "    cy.wrap(calendar).children().contains(date.getFullYear()).click();",
      "    cy.wrap(calendar).children().contains(months[date.getMonth()]).click();",
      "    cy.wrap(calendar).find('.mat-calendar-body-cell-content').contains(date.getDate()).click({ force: true });",
      "  });",
      "};",
      "",
      "const saveLocalStorage = (): void => {",
      "  Object.keys(localStorage).forEach(key => {",
      "    LOCAL_STORAGE_MEMORY[key] = localStorage[key];",
      "  });",
      "};",
      "",
      "const restoreLocalStorage = () => {",
      "  Object.keys(LOCAL_STORAGE_MEMORY).forEach(key => {",
      "    localStorage.setItem(key, LOCAL_STORAGE_MEMORY[key]);",
      "  });",
      "};",
      "",
      "const login = (): void => {",
      "  cy.request({",
      "    url: Cypress.env('urlTenant'),",
      "    method: 'POST',",
      "    form: true,",
      "    body: {",
      "      username: Cypress.env('user'),",
      "      password: Cypress.env('password'),",
      "      grant_type: 'password',",
      "      client_id: Cypress.env('clientId'),",
      "      scope: Cypress.env('scope'),",
      "      response_type: 'token id_token',",
      "    },",
      "  }).then((response) => {",
      "    console.log({ response });",
      "    window.localStorage.setItem('access_token', response.body.access_token);",
      "    window.localStorage.setItem(",
      "      'id_token_claims_obj',",
      "      JSON.stringify({",
      "        name: 'Cypress User',",
      "        emails: ['cypress@test.cy'],",
      "      })",
      "    );",
      "  });",
      "};",
      "",
      "const getBySel = (selector: string, ...args: Partial<[]>) => {",
      "  return cy.get(`[data-cy=\"\\${selector}]\"`, ...args);",
      "}",
      "",
      "Cypress.Commands.add('login', login);",
      "Cypress.Commands.add('getBySel', getBySel);",
      "Cypress.Commands.add('navigateTo', navigateTo);",
      "Cypress.Commands.add('fillDatePicker', fillDatePicker);",
      "Cypress.Commands.add('saveLocalStorage', saveLocalStorage);",
      "Cypress.Commands.add('restoreLocalStorage', restoreLocalStorage);"
    ],
    "description": "cypresscommands"
  },
  "cypresstsconfig": {
    "prefix": "cytsconfig",
    "scope": "typescript",
    "body": [
      "{",
      "  \"extends\": \"../tsconfig.base.json\",",
      "  \"include\": [\"../node_modules/cypress\", \"**/*.ts\"],",
      "  \"compilerOptions\": {",
      "    \"sourceMap\": false,",
      "    \"target\": \"es2020\",",
      "    \"lib\": [\"es5\", \"dom\"],",
      "    \"types\": [\"cypress\"]",
      "  }",
      "}"
    ],
    "description": "cypresstsconfig"
  },
  "cypressjson": {
    "prefix": "cyjson",
    "scope": "typescript",
    "body": [
      "{",
      "  \"integrationFolder\": \"cypress/integration\",",
      "  \"supportFile\": \"cypress/support/index.ts\",",
      "  \"videosFolder\": \"cypress/videos\",",
      "  \"screenshotsFolder\": \"cypress/screenshots\",",
      "  \"pluginsFile\": \"cypress/plugins/index.js\",",
      "  \"fixturesFolder\": \"cypress/fixtures\",",
      "  \"baseUrl\": \"http://localhost:4200\",",
      "  \"viewportWidth\": 1920,",
      "  \"viewportHeight\": 1080,",
      "  \"experimentalStudio\": true,",
      "  \"env\": {",
      "    \"clientId\": \"\",",
      "    \"clientSecret\": \"\",",
      "    \"urlTenant\": \"\",",
      "    \"password\": \"\",",
      "    \"user\": \"\",",
      "    \"scope\": \"openid profile email offline_access https://audiencesdeepawarenessdev.onmicrosoft.com/backofficeapi/Backoffice.Write\"",
      "  }",
      "}"
    ],
    "description": "cypressjson"
  }
}